package kitty.testapp.inf.web;

import java.util.List;
import java.util.ArrayList;
import kitty.kaf.helper.StringHelper;
import java.util.concurrent.CopyOnWriteArrayList;
import kitty.kaf.session.SessionUser;
import kitty.kaf.json.JSONArray;
import kitty.kaf.json.JSONException;
import kitty.kaf.json.JSONObject;

/**
 * 
 * 自动生成的菜单数据值
 * 
 */
public class MenuData {

    //[autogenerated:static(initlist) statements=5]
    public static List<MenuDataDef> mainMenuDefs = new CopyOnWriteArrayList<MenuDataDef>();

    static MenuDataDef myMenu;

    static MenuDataDef basicMenu;

    static MenuDataDef rightMenu;

    static {
        myMenu = new MenuDataDef(0L, "my", "", "我的工作台", "/pages/my/index.go", "", "");
        mainMenuDefs.add(myMenu);
        basicMenu = new MenuDataDef(0L, "basic", "", "基础管理", "/pages/basic/index.go", "", "");
        mainMenuDefs.add(basicMenu);
        basicMenu.subMenuDefs.add(new MenuDataDef(0L, "file_host", "file_host_manage", "文件主机", "/pages/basic/filehost/index.go", "", ""));
        basicMenu.subMenuDefs.add(new MenuDataDef(0L, "file_category", "file_category_manage", "文件分类", "/pages/basic/filecategory/index.go", "", ""));
        rightMenu = new MenuDataDef(0L, "right", "", "权限管理", "/pages/right/index.go", "", "");
        mainMenuDefs.add(rightMenu);
        rightMenu.subMenuDefs.add(new MenuDataDef(100000L, "role", "role_manage", "角色", "/pages/right/role/index.go", "", ""));
        rightMenu.subMenuDefs.add(new MenuDataDef(300000L, "user", "user_manage", "用户", "/pages/right/user/index.go", "", ""));
    }

    public static class MenuDataDef {

        long right;

        String name;

        String desp;

        String url;

        String rightName;

        String[] jsFiles;

        String[] cssFiles;

        List<MenuDataDef> subMenuDefs = new CopyOnWriteArrayList<MenuDataDef>();

        public MenuDataDef(long right, String name, String rightName, String desp, String url, String cssFiles, String jsFiles) {
            super();
            this.right = right;
            this.name = name;
            this.rightName = rightName;
            this.desp = desp;
            this.url = url;
            this.cssFiles = StringHelper.splitToStringArrayIngoreEmptyLine(cssFiles, ";");
            this.jsFiles = StringHelper.splitToStringArrayIngoreEmptyLine(jsFiles, ";");
        }

        public long getRight() {
            return right;
        }

        public String getUrl() {
            return url;
        }

        public String getDesp() {
            return desp;
        }

        public String getRightName() {
            return rightName;
        }

        public String getName() {
            return name;
        }

        public JSONObject toJson() throws JSONException {
            JSONObject j = new JSONObject();
            JSONObject button = new JSONObject();
            JSONObject label = new JSONObject();
            j.put("button", button);
            button.put("labelParams", label);
            label.put("html", getDesp());
            j.put("url", getUrl());
            if (jsFiles.length > 0 || cssFiles.length > 0) {
                JSONArray a = new JSONArray();
                j.put("jsCssFiles", a);
                for (String s : cssFiles) {
                    JSONObject jj = new JSONObject();
                    jj.put("type", "css");
                    jj.put("url", s);
                    a.put(jj);
                }
                for (String s : jsFiles) {
                    JSONObject jj = new JSONObject();
                    jj.put("type", "js");
                    jj.put("url", s);
                    a.put(jj);
                }
            }
            return j;
        }
    }

    SessionUser user;

    public MenuData(SessionUser user) {
        //[autogenerated:body(MenuData) statements=1]
        this.user = user;
    }

    public List<MenuDataDef> getMainMenuList() {
        //[autogenerated:return(getMainMenuList) statements=3]
        List<MenuDataDef> list = new ArrayList<MenuDataDef>();
        for (MenuDataDef o : mainMenuDefs) {
            if (o.right == 0L || user.hasRight(o.right)) list.add(o);
        }
        return list;
    }

    public List<MenuDataDef> getMyMenuList() {
        //[autogenerated:return(getMyMenuList) statements=3]
        List<MenuDataDef> list = new ArrayList<MenuDataDef>();
        for (MenuDataDef o : myMenu.subMenuDefs) {
            if (o.right == 0L || user.hasRight(o.right)) list.add(o);
        }
        return list;
    }

    public List<MenuDataDef> getBasicMenuList() {
        //[autogenerated:return(getBasicMenuList) statements=3]
        List<MenuDataDef> list = new ArrayList<MenuDataDef>();
        for (MenuDataDef o : basicMenu.subMenuDefs) {
            if (o.right == 0L || user.hasRight(o.right)) list.add(o);
        }
        return list;
    }

    public List<MenuDataDef> getRightMenuList() {
        //[autogenerated:return(getRightMenuList) statements=3]
        List<MenuDataDef> list = new ArrayList<MenuDataDef>();
        for (MenuDataDef o : rightMenu.subMenuDefs) {
            if (o.right == 0L || user.hasRight(o.right)) list.add(o);
        }
        return list;
    }

    public String getMainMenuJson() throws JSONException {
        //[autogenerated:return(getMainMenuJson) statements=4]
        JSONArray a = new JSONArray();
        int i = 0;
        for (MenuDataDef o : mainMenuDefs) {
            if (o.right == 0L || user.hasRight(o.right)) {
                JSONObject j = o.toJson();
                if (i == 0) j.put("selected", true);
                i++;
                a.put(j);
            }
        }
        return a.toString();
    }

    public String getMyMenuJson() throws JSONException {
        //[autogenerated:return(getMyMenuJson) statements=4]
        JSONArray a = new JSONArray();
        int i = 0;
        for (MenuDataDef o : myMenu.subMenuDefs) {
            if (o.right == 0L || user.hasRight(o.right)) {
                JSONObject j = o.toJson();
                if (i == 0) j.put("selected", true);
                i++;
                a.put(j);
            }
        }
        return a.toString();
    }

    public String getBasicMenuJson() throws JSONException {
        //[autogenerated:return(getBasicMenuJson) statements=4]
        JSONArray a = new JSONArray();
        int i = 0;
        for (MenuDataDef o : basicMenu.subMenuDefs) {
            if (o.right == 0L || user.hasRight(o.right)) {
                JSONObject j = o.toJson();
                if (i == 0) j.put("selected", true);
                i++;
                a.put(j);
            }
        }
        return a.toString();
    }

    public String getRightMenuJson() throws JSONException {
        //[autogenerated:return(getRightMenuJson) statements=4]
        JSONArray a = new JSONArray();
        int i = 0;
        for (MenuDataDef o : rightMenu.subMenuDefs) {
            if (o.right == 0L || user.hasRight(o.right)) {
                JSONObject j = o.toJson();
                if (i == 0) j.put("selected", true);
                i++;
                a.put(j);
            }
        }
        return a.toString();
    }
}
