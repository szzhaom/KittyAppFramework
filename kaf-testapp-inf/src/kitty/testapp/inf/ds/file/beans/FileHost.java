package kitty.testapp.inf.ds.file.beans;

import java.io.IOException;
import java.sql.SQLException;
import kitty.kaf.io.DataRead;
import kitty.kaf.io.DataWrite;
import kitty.kaf.dao.table.TableDef;
import kitty.kaf.dao.resultset.DaoResultSet;
import kitty.kaf.dao.table.TableColumnDef;
import kitty.kaf.json.JSONException;
import kitty.kaf.trade.pack.HttpRequest;
import kitty.kaf.json.JSONObject;
import kitty.kaf.dao.table.IdTableObject;
import kitty.kaf.cache.LocalCachable;

/**
 * 
 * 文件主机
 * 
 */
public class FileHost extends IdTableObject<Short> implements LocalCachable<Short> {

    //[autogenerated:static(CACHE_KEY_PREFIX) statements=1]
    public static final String CACHE_KEY_PREFIX = "$cache.filehost";

    //[autogenerated:static(tableDef) statements=2]
    public static final TableDef tableDef = new TableDef("t_file_host");

    static {
        tableDef.getColumns().put("lastModifiedTime", new TableColumnDef(0, "最后修改时间", "last_modified_time", 0, 0, 0, false, null, false, true, false));
        tableDef.getColumns().put("creationTime", new TableColumnDef(1, "创建时间", "creation_time", 0, 0, 0, false, null, false, false, false));
        tableDef.getColumns().put("isDeleted", new TableColumnDef(2, "是否删除", "is_deleted", 0, 0, 0, false, null, false, false, false));
        tableDef.getColumns().put("fileHostId", new TableColumnDef(3, "文件主机ID", "file_host_id", 0, 0, 0, false, null, false, true, false));
        tableDef.getColumns().put("fileHostDesp", new TableColumnDef(4, "文件主机描述", "file_host_desp", 0, 50, 0, false, null, false, true, true));
        tableDef.getColumns().put("ftpHost", new TableColumnDef(5, "FTP主机名", "ftp_host", 0, 50, 0, false, null, false, true, false));
        tableDef.getColumns().put("ftpPort", new TableColumnDef(6, "FTP端口", "ftp_port", 0, 0, 0, false, null, false, true, false));
        tableDef.getColumns().put("ftpUser", new TableColumnDef(7, "FTP登录用户", "ftp_user", 0, 50, 0, false, null, false, true, false));
        tableDef.getColumns().put("ftpPwd", new TableColumnDef(8, "FTP登录密码", "ftp_pwd", 0, 50, 0, false, null, true, true, false));
        tableDef.getColumns().put("webRoot", new TableColumnDef(9, "http访问根目录", "web_root", 0, 255, 0, false, null, false, true, false));
        tableDef.setPkColumns("fileHostId");
    }

    private static final long serialVersionUID = 1L;

    @Override
    public TableDef getTableDef() {
        //[autogenerated:return(getTableDef) statements=1]
        return tableDef;
    }

    @Override
    public Object getByColumn(String columnName) {
        //[autogenerated:return(getByColumn) statements=2]
        if (columnName.equalsIgnoreCase("file_host_id")) return getId();
        else if (columnName.equalsIgnoreCase("file_host_desp")) return getFileHostDesp();
        else if (columnName.equalsIgnoreCase("ftp_host")) return getFtpHost();
        else if (columnName.equalsIgnoreCase("ftp_port")) return getFtpPort();
        else if (columnName.equalsIgnoreCase("ftp_user")) return getFtpUser();
        else if (columnName.equalsIgnoreCase("ftp_pwd")) return getFtpPwd();
        else if (columnName.equalsIgnoreCase("web_root")) return getWebRoot();
        return super.getByColumn(columnName);
    }

    /**
     * 文件主机描述
     */
    private String fileHostDesp;

    /**
     * FTP主机名
     */
    private String ftpHost;

    /**
     * FTP端口
     */
    private Integer ftpPort;

    /**
     * FTP登录用户
     */
    private String ftpUser;

    /**
     * FTP登录密码
     */
    private String ftpPwd;

    /**
     * http访问根目录
     */
    private String webRoot;

    /**
     * 获得文件主机ID
     */
    public Short getFileHostId() {
        //[autogenerated:return(getFileHostId) statements=1]
        return getId();
    }

    /**
     * 获得文件主机描述
     */
    public String getFileHostDesp() {
        //[autogenerated:return(getFileHostDesp) statements=1]
        return fileHostDesp;
    }

    /**
     * 获得FTP主机名
     */
    public String getFtpHost() {
        //[autogenerated:return(getFtpHost) statements=1]
        return ftpHost;
    }

    /**
     * 获得FTP端口
     */
    public Integer getFtpPort() {
        //[autogenerated:return(getFtpPort) statements=1]
        return ftpPort;
    }

    /**
     * 获得FTP登录用户
     */
    public String getFtpUser() {
        //[autogenerated:return(getFtpUser) statements=1]
        return ftpUser;
    }

    /**
     * 获得FTP登录密码
     */
    public String getFtpPwd() {
        //[autogenerated:return(getFtpPwd) statements=1]
        return ftpPwd;
    }

    /**
     * 获得http访问根目录
     */
    public String getWebRoot() {
        //[autogenerated:return(getWebRoot) statements=1]
        return webRoot;
    }

    /**
     * 设置文件主机ID
     */
    public void setFileHostId(Short v) {
        //[autogenerated:body(setFileHostId) statements=1]
        setId(v);
    }

    /**
     * 设置文件主机描述
     */
    public void setFileHostDesp(String v) {
        //[autogenerated:body(setFileHostDesp) statements=1]
        fileHostDesp = v;
    }

    /**
     * 设置FTP主机名
     */
    public void setFtpHost(String v) {
        //[autogenerated:body(setFtpHost) statements=1]
        ftpHost = v;
    }

    /**
     * 设置FTP端口
     */
    public void setFtpPort(Integer v) {
        //[autogenerated:body(setFtpPort) statements=1]
        ftpPort = v;
    }

    /**
     * 设置FTP登录用户
     */
    public void setFtpUser(String v) {
        //[autogenerated:body(setFtpUser) statements=1]
        ftpUser = v;
    }

    /**
     * 设置FTP登录密码
     */
    public void setFtpPwd(String v) {
        //[autogenerated:body(setFtpPwd) statements=1]
        if (v != null && v.length() > 0) ftpPwd = v;
    }

    /**
     * 设置http访问根目录
     */
    public void setWebRoot(String v) {
        //[autogenerated:body(setWebRoot) statements=1]
        webRoot = v;
    }

    @Override
    public String toString() {
        //[autogenerated:return(toString) statements=1]
        return fileHostDesp;
    }

    @Override
    public String getIdString() {
        //[autogenerated:return(getIdString) statements=1]
        return Short.toString(getId());
    }

    @Override
    public void setIdString(String v) {
        //[autogenerated:body(setIdString) statements=1]
        setId(Short.valueOf(v));
    }

    @Override
    public int compareId(Short id1, Short id2) {
        //[autogenerated:return(compareId) statements=1]
        return id1.compareTo(id2);
    }

    @Override
    public FileHost newInstance() {
        //[autogenerated:return(newInstance) statements=1]
        return new FileHost();
    }

    @Override
    public void setNull(boolean v) {
        //[autogenerated:return(setNull) statements=2]
        super.setNull(v);
        if (v) {
            setId((short)-1);
        }
    }

    @Override
    public void toJson(JSONObject json) throws JSONException {
        //[autogenerated:body(toJson) statements=6]
        super.toJson(json);
        json.put("file_host_desp", fileHostDesp);
        json.put("ftp_host", ftpHost);
        json.put("ftp_port", ftpPort);
        json.put("ftp_user", ftpUser);
        json.put("web_root", webRoot);
    }

    @Override
    public void doReadFromStream(DataRead stream) throws IOException {
        //[autogenerated:body(doReadFromStream) statements=7]
        setId(stream.readShort());
        setFileHostDesp(stream.readPacketByteLenString());
        setFtpHost(stream.readPacketByteLenString());
        setFtpPort(stream.readInt());
        setFtpUser(stream.readPacketByteLenString());
        setFtpPwd(stream.readPacketByteLenString());
        setWebRoot(stream.readPacketByteLenString());
    }

    @Override
    public void doWriteToStream(DataWrite stream) throws IOException {
        //[autogenerated:body(doWriteToStream) statements=7]
        stream.writeShort(getId());
        stream.writePacketByteLenString(getFileHostDesp());
        stream.writePacketByteLenString(getFtpHost());
        stream.writeInt(getFtpPort());
        stream.writePacketByteLenString(getFtpUser());
        stream.writePacketByteLenString(getFtpPwd());
        stream.writePacketByteLenString(getWebRoot());
    }

    @Override
    public void readFromDb(DaoResultSet rset) throws SQLException {
        //[autogenerated:body(readFromDb) statements=8]
        super.readFromDb(rset);
        setId(rset.getShort("file_host_id"));
        setFileHostDesp(rset.getString("file_host_desp"));
        setFtpHost(rset.getString("ftp_host"));
        setFtpPort(rset.getInt("ftp_port"));
        setFtpUser(rset.getString("ftp_user"));
        setFtpPwd(rset.getString("ftp_pwd"));
        setWebRoot(rset.getString("web_root"));
    }

    @Override
    public void readFromRequest(HttpRequest request, boolean isCreate) throws Exception {
        //[autogenerated:body(readFromRequest) statements=8]
        super.readFromRequest(request, isCreate);
        setId(request.getParameterShort("file_host_id"));
        setFileHostDesp(request.getParameter("file_host_desp"));
        setFtpHost(request.getParameter("ftp_host"));
        setFtpPort(request.getParameterIntDef("ftp_port", 21));
        setFtpUser(request.getParameter("ftp_user"));
        setFtpPwd(request.getParameter("ftp_pwd"));
        setWebRoot(request.getParameter("web_root"));
    }
}
