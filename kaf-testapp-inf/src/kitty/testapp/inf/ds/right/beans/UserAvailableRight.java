package kitty.testapp.inf.ds.right.beans;

import java.io.Serializable;
import kitty.kaf.session.SessionUser;

/**
 * 
 * 功能
 * 
 */
public class UserAvailableRight implements Serializable {

    private static final long serialVersionUID = 1L;

    private SessionUser user;

    public static final long BASIC_MANAGE = 10001L;

    private Boolean basicManageEnabled;

    UserAvailableRight(SessionUser user) {
        this.user = user;
    }

    public boolean isBasicManageEnabled() {
        //[autogenerated:body(isBasicManageEnabled) statements=1]
        if (basicManageEnabled == null) basicManageEnabled = user.hasRight(BASIC_MANAGE);
        //[autogenerated:return(isBasicManageEnabled) statements=1]
        return basicManageEnabled;
    }

    public static final long RIGHT_MANAGE = 10002L;

    private Boolean rightManageEnabled;

    public boolean isRightManageEnabled() {
        //[autogenerated:body(isRightManageEnabled) statements=1]
        if (rightManageEnabled == null) rightManageEnabled = user.hasRight(RIGHT_MANAGE);
        //[autogenerated:return(isRightManageEnabled) statements=1]
        return rightManageEnabled;
    }

    public static final long ROLE_MANAGE = 100000L;

    private Boolean roleManageEnabled;

    public boolean isRoleManageEnabled() {
        //[autogenerated:body(isRoleManageEnabled) statements=1]
        if (roleManageEnabled == null) roleManageEnabled = user.hasRight(ROLE_MANAGE);
        //[autogenerated:return(isRoleManageEnabled) statements=1]
        return roleManageEnabled;
    }

    public static final long ROLE_QUERY = 100001L;

    private Boolean roleQueryEnabled;

    public boolean isRoleQueryEnabled() {
        //[autogenerated:body(isRoleQueryEnabled) statements=1]
        if (roleQueryEnabled == null) roleQueryEnabled = user.hasRight(ROLE_QUERY);
        //[autogenerated:return(isRoleQueryEnabled) statements=1]
        return roleQueryEnabled;
    }

    public static final long ROLE_INSERT = 100003L;

    private Boolean roleInsertEnabled;

    public boolean isRoleInsertEnabled() {
        //[autogenerated:body(isRoleInsertEnabled) statements=1]
        if (roleInsertEnabled == null) roleInsertEnabled = user.hasRight(ROLE_INSERT);
        //[autogenerated:return(isRoleInsertEnabled) statements=1]
        return roleInsertEnabled;
    }

    public static final long ROLE_EDIT = 100004L;

    private Boolean roleEditEnabled;

    public boolean isRoleEditEnabled() {
        //[autogenerated:body(isRoleEditEnabled) statements=1]
        if (roleEditEnabled == null) roleEditEnabled = user.hasRight(ROLE_EDIT);
        //[autogenerated:return(isRoleEditEnabled) statements=1]
        return roleEditEnabled;
    }

    public static final long ROLE_DELETE = 100005L;

    private Boolean roleDeleteEnabled;

    public boolean isRoleDeleteEnabled() {
        //[autogenerated:body(isRoleDeleteEnabled) statements=1]
        if (roleDeleteEnabled == null) roleDeleteEnabled = user.hasRight(ROLE_DELETE);
        //[autogenerated:return(isRoleDeleteEnabled) statements=1]
        return roleDeleteEnabled;
    }

    public static final long USER_MANAGE = 300000L;

    private Boolean userManageEnabled;

    public boolean isUserManageEnabled() {
        //[autogenerated:body(isUserManageEnabled) statements=1]
        if (userManageEnabled == null) userManageEnabled = user.hasRight(USER_MANAGE);
        //[autogenerated:return(isUserManageEnabled) statements=1]
        return userManageEnabled;
    }

    public static final long USER_QUERY = 300001L;

    private Boolean userQueryEnabled;

    public boolean isUserQueryEnabled() {
        //[autogenerated:body(isUserQueryEnabled) statements=1]
        if (userQueryEnabled == null) userQueryEnabled = user.hasRight(USER_QUERY);
        //[autogenerated:return(isUserQueryEnabled) statements=1]
        return userQueryEnabled;
    }

    public static final long USER_INSERT = 300003L;

    private Boolean userInsertEnabled;

    public boolean isUserInsertEnabled() {
        //[autogenerated:body(isUserInsertEnabled) statements=1]
        if (userInsertEnabled == null) userInsertEnabled = user.hasRight(USER_INSERT);
        //[autogenerated:return(isUserInsertEnabled) statements=1]
        return userInsertEnabled;
    }

    public static final long USER_EDIT = 300004L;

    private Boolean userEditEnabled;

    public boolean isUserEditEnabled() {
        //[autogenerated:body(isUserEditEnabled) statements=1]
        if (userEditEnabled == null) userEditEnabled = user.hasRight(USER_EDIT);
        //[autogenerated:return(isUserEditEnabled) statements=1]
        return userEditEnabled;
    }

    public static final long USER_DELETE = 300005L;

    private Boolean userDeleteEnabled;

    public boolean isUserDeleteEnabled() {
        //[autogenerated:body(isUserDeleteEnabled) statements=1]
        if (userDeleteEnabled == null) userDeleteEnabled = user.hasRight(USER_DELETE);
        //[autogenerated:return(isUserDeleteEnabled) statements=1]
        return userDeleteEnabled;
    }

    public boolean isAdmin() {
        return user != null && user.getLoginName().equals("admin");
    }
}
