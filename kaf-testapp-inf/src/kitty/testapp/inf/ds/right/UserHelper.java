package kitty.testapp.inf.ds.right;

import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import kitty.kaf.cache.CacheValueList;
import kitty.kaf.cache.MemcachedCallback;
import kitty.kaf.exceptions.CoreException;
import kitty.kaf.helper.SecurityHelper;
import kitty.kaf.io.KeyValue;
import kitty.kaf.pools.jndi.JndiConnectionFactory;
import kitty.kaf.pools.jndi.Lookuper;
import kitty.kaf.pools.memcached.MemcachedClient;
import kitty.kaf.pools.memcached.UniqueKeyMemcachedMap;
import kitty.kaf.session.AbstractRequestSession;
import kitty.kaf.session.RequestSession;
import kitty.testapp.inf.ds.right.beans.User;
import kitty.testapp.inf.web.WebSession;
import java.util.ArrayList;

public class UserHelper {

	// [autogenerated:static(cached) statements=2]
	public static final MemcachedClient mc = MemcachedClient.newInstance(null, "default");

	public static final UniqueKeyMemcachedMap<Long, String, User> userMap = new UniqueKeyMemcachedMap<Long, String, User>(
			new MemcachedCallback() {

				@Override
				public Object onGetCacheValue(Object source, Object id) throws Throwable {
					User ret = null;
					if (id instanceof Long)
						ret = findById(null, null, (Long) id);
					else
						ret = findByUniqueKey(null, null, (String) id);
					getCacheValueCompete(ret);
					return ret;
				}

				@Override
				public boolean isNullId(Object v) {
					return ((Long) v).compareTo(-1L) <= 0;
				}
			}, mc, User.CACHE_KEY_PREFIX, User.class);

	public static void delete(Object caller, Long loginUserId, List<Long> idList) throws Exception {
		// [autogenerated:begin(delete) statements=1]
		UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean",
				UserBeanRemote.class);
		// [autogenerated:body(delete) statements=1]
		bean.delete(loginUserId, idList);
	}

	public static User findById(Object caller, Long loginUserId, Long id) throws Exception {
		// [autogenerated:begin(findById) statements=1]
		UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean",
				UserBeanRemote.class);
		// [autogenerated:body(findById) statements=1]
		User ret = bean.findById(loginUserId, id);
		// [autogenerated:return(findById) statements=1]
		return ret;
	}

	public static User findByUniqueKey(Object caller, Long loginUserId, String keyCode) throws Exception {
		// [autogenerated:begin(findByUniqueKey) statements=1]
		UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean",
				UserBeanRemote.class);
		// [autogenerated:body(findByUniqueKey) statements=1]
		User ret = bean.findByUniqueKey(loginUserId, keyCode);
		// [autogenerated:return(findByUniqueKey) statements=1]
		return ret;
	}

	public static User insert(Object caller, Long loginUserId, User o) throws Exception {
		// [autogenerated:begin(insert) statements=1]
		UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean",
				UserBeanRemote.class);
		// [autogenerated:body(insert) statements=1]
		User ret = bean.insert(loginUserId, o);
		// [autogenerated:return(insert) statements=1]
		return ret;
	}

	public static User edit(Object caller, Long loginUserId, User o) throws Exception {
		// [autogenerated:begin(edit) statements=1]
		UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean",
				UserBeanRemote.class);
		// [autogenerated:body(edit) statements=1]
		User ret = bean.edit(loginUserId, o);
		// [autogenerated:return(edit) statements=1]
		return ret;
	}

	public static List<User> query(Object caller, Long loginUserId, String cmd, int maxResults, List<?> params)
			throws Exception {
		// [autogenerated:begin(query) statements=1]
		UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean",
				UserBeanRemote.class);
		// [autogenerated:body(query) statements=1]
		List<User> ret = bean.query(loginUserId, cmd, maxResults, params);
		// [autogenerated:return(query) statements=1]
		return ret;
	}

	public static CacheValueList<?, ?> queryLatest(Object caller, Long loginUserId, String cmd, long firstIndex,
			int maxResults, Date lastModified) throws Exception {
		// [autogenerated:begin(queryLatest) statements=1]
		UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean",
				UserBeanRemote.class);
		// [autogenerated:body(queryLatest) statements=1]
		CacheValueList<?, ?> ret = bean.queryLatest(loginUserId, cmd, firstIndex, maxResults, lastModified);
		// [autogenerated:return(queryLatest) statements=1]
		return ret;
	}

	public static KeyValue<Integer, List<User>> queryPage(Object caller, Long loginUserId, String cmd, long firstIndex,
			int maxResults, List<?> params) throws Exception {
		// [autogenerated:begin(queryPage) statements=1]
		UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean",
				UserBeanRemote.class);
		// [autogenerated:body(queryPage) statements=1]
		KeyValue<Integer, List<User>> ret = bean.queryPage(loginUserId, cmd, firstIndex, maxResults, params);
		// [autogenerated:return(queryPage) statements=1]
		return ret;
	}

	public static Object execute(Object caller, Long loginUserId, String cmd, List<?> params) throws Exception {
		// [autogenerated:begin(execute) statements=1]
		UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean",
				UserBeanRemote.class);
		// [autogenerated:body(execute) statements=1]
		Object ret = bean.execute(loginUserId, cmd, params);
		// [autogenerated:return(execute) statements=1]
		return ret;
	}

	public static void getCacheValueCompete(User v) {
	}

	public static void insertOrEditPageProcess(HttpServletRequest request, HttpServletResponse response) {
		// [autogenerated:body(insertOrEditPageProcess) statements=4]
		String id = request.getParameter("id");
		String error = null;
		if (id != null) {
			try {
				RequestSession<?> session = AbstractRequestSession.getCurrentSession(request);
				User p = UserHelper.findById(null, session.getUser().getUserId(), Long.valueOf(id));
				if (p == null)
					error = "找不到用户信息[id=" + id + "]";
				else
					request.setAttribute("data", p);
			} catch (Throwable e) {
				error = e.getMessage();
			}
		} else
			request.setAttribute("data", new User());
		if (error != null)
			request.setAttribute("error", error);
	}

	public static void login(WebSession session, String loginName, String password) throws Exception {
		User s = userMap.getByName(loginName);
		String p = SecurityHelper.md5(password);
		if (s == null || !s.getUserPwd().equalsIgnoreCase(p)) {
			session.saveLoginNameCookie(loginName);
			throw new CoreException("用户不存在或密码不正确");
		}
		session.loginSuccess(s);
	}

	public static Object execute(Object caller, Long loginUserId, String cmd, Object... params) throws Exception {
		// [autogenerated:return(execute...) statements=3]
		List<Object> ls = new ArrayList<Object>();
		for (Object o : params)
			ls.add(o);
		return execute(caller, loginUserId, cmd, ls);
	}
}
