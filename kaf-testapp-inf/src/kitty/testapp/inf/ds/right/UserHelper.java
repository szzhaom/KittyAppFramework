package kitty.testapp.inf.ds.right;

import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import kitty.kaf.cache.CacheValueList;
import kitty.kaf.cache.MemcachedCallback;
import kitty.kaf.exceptions.CoreException;
import kitty.kaf.helper.SecurityHelper;
import kitty.kaf.io.KeyValue;
import kitty.kaf.pools.jndi.JndiConnectionFactory;
import kitty.kaf.pools.jndi.Lookuper;
import kitty.kaf.pools.memcached.MemcachedClient;
import kitty.kaf.pools.memcached.UniqueKeyMemcachedMap;
import kitty.kaf.session.AbstractRequestSession;
import kitty.kaf.session.RequestSession;
import kitty.testapp.inf.ds.right.beans.User;
import kitty.testapp.inf.web.WebSession;

public class UserHelper {

    //[autogenerated:static(cached) statements=2]
    public static final MemcachedClient mc = MemcachedClient.newInstance(null, "default");

    public static final UniqueKeyMemcachedMap<Long, String, User> userMap = new UniqueKeyMemcachedMap<Long, String, User>(new MemcachedCallback() {

        @Override
        public Object onGetCacheValue(Object source, Object id) throws Throwable {
            User ret = null;
            if (id instanceof Long) ret = findById(null, null, (Long) id);
            else ret = findByUniqueKey(null, null, (String) id);
            getCacheValueCompete(ret);
            return ret;
        }

        @Override
        public boolean isNullId(Object v) {
            return ((Long) v).compareTo(-1L) <= 0;
        }
    }, mc, User.CACHE_KEY_PREFIX, User.class);

    public static void delete(Object caller, Long loginUserId, List<Long> idList) throws Exception {
        //[autogenerated:return(delete) statements=2]
        UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean", UserBeanRemote.class);
        bean.delete(loginUserId, idList);
    }

    public static User findById(Object caller, Long loginUserId, Long id) throws Exception {
        //[autogenerated:return(findById) statements=2]
        UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean", UserBeanRemote.class);
        return bean.findById(loginUserId, id);
    }

    public static User findByUniqueKey(Object caller, Long loginUserId, String keyCode) throws Exception {
        //[autogenerated:return(findByUniqueKey) statements=2]
        UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean", UserBeanRemote.class);
        return bean.findByUniqueKey(loginUserId, keyCode);
    }

    public static User insert(Object caller, Long loginUserId, User o) throws Exception {
        //[autogenerated:return(insert) statements=2]
        UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean", UserBeanRemote.class);
        return bean.insert(loginUserId, o);
    }

    public static User edit(Object caller, Long loginUserId, User o) throws Exception {
        //[autogenerated:return(edit) statements=2]
        UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean", UserBeanRemote.class);
        return bean.edit(loginUserId, o);
    }

    public static List<User> query(Object caller, Long loginUserId, String cmd, int maxResults, List<?> params) throws Exception {
        //[autogenerated:return(query) statements=2]
        UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean", UserBeanRemote.class);
        return bean.query(loginUserId, cmd, maxResults, params);
    }

    public static CacheValueList<?, ?> queryLatest(Object caller, Long loginUserId, String cmd, long firstIndex, int maxResults, Date lastModified) throws Exception {
        //[autogenerated:return(queryLatest) statements=2]
        UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean", UserBeanRemote.class);
        return bean.queryLatest(loginUserId, cmd, firstIndex, maxResults, lastModified);
    }

    public static KeyValue<Integer, List<User>> queryPage(Object caller, Long loginUserId, String cmd, long firstIndex, int maxResults, List<?> params) throws Exception {
        //[autogenerated:return(queryPage) statements=2]
        UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean", UserBeanRemote.class);
        return bean.queryPage(loginUserId, cmd, firstIndex, maxResults, params);
    }

    public static Object execute(Object caller, Long loginUserId, String cmd, List<?> params) throws Exception {
        //[autogenerated:return(execute) statements=2]
        UserBeanRemote bean = JndiConnectionFactory.lookup("db", caller, Lookuper.JNDI_TYPE_EJB, "testappUserBean", UserBeanRemote.class);
        return bean.execute(loginUserId, cmd, params);
    }

    public static void getCacheValueCompete(User v) {
    }

    public static void insertOrEditPageProcess(HttpServletRequest request, HttpServletResponse response) {
        //[autogenerated:body(insertOrEditPageProcess) statements=4]
        String id = request.getParameter("id");
        String error = null;
        if (id != null) {
            try {
                RequestSession<?> session = AbstractRequestSession.getCurrentSession(request);
                User p = UserHelper.findById(null, session.getUser().getUserId(), Long.valueOf(id));
                if (p == null) error = "找不到用户信息[id=" + id + "]";
                else request.setAttribute("data", p);
            } catch (Throwable e) {
                error = e.getMessage();
            }
        }
        else request.setAttribute("data", new User());
        if (error != null) request.setAttribute("error", error);
    }

    public static void login(WebSession session, String loginName, String password) throws Exception {
        User s = userMap.getByName(loginName);
        String p = SecurityHelper.md5(password);
        if (s == null || !s.getUserPwd().equalsIgnoreCase(p)) {
            session.saveLoginNameCookie(loginName);
            throw new CoreException("用户不存在或密码不正确");
        }
        session.loginSuccess(s);
    }
}
