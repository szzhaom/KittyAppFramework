package kitty.testapp.inf.trade;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import kitty.kaf.exceptions.CoreException;
import kitty.kaf.json.JSONException;
import kitty.kaf.json.JSONObject;
import kitty.kaf.logging.KafLogger;
import kitty.kaf.trade.pack.HttpRequest;
import kitty.kaf.trade.web.JsonExecutor;
import kitty.testapp.inf.trade.executors.FileExecutor;
import kitty.testapp.inf.trade.executors.RightExecutor;
import kitty.testapp.inf.web.WebSession;
import org.w3c.dom.Document;

public class WebTradeExecutor extends JsonExecutor {

    static KafLogger logger = KafLogger.getLogger(WebTradeExecutor.class);

    public String getIpAddr(HttpServletRequest request) {
        String ip = "";
        try {
            ip = request.getHeader("x-forwarded-for");
            if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
                ip = request.getHeader("Proxy-Client-IP");
            }
            if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
                ip = request.getHeader("WL-Proxy-Client-IP");
            }
            if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
                ip = request.getRemoteAddr();
            }
        } catch (Throwable e) {
            ip = "0.0.0.0";
        }
        return ip;
    }

    @Override
    public void init(Document doc) {
    }

    @Override
    public void uninit() {
    }

    private WebSession getSession(HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws JSONException {
        WebSession session = (WebSession) WebSession.getCurrentSession(request.getRequest());
        if (!session.isLogined()) {
            r.append("relogin", true);
            throw new CoreException("需要登录");
        }
        return session;
    }

    @Override
    public void doExecute(HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        WebSession session = getSession(request, response, c, r);
        String cmd = request.getParameter("cmd");
        String group = request.getParameter("group");
        //[autogenerated:body(doExecute) statements=1]
        if (group.equalsIgnoreCase("file")) FileExecutor.doExecute(session, cmd, request, response, c, r);
        else if (group.equalsIgnoreCase("right")) RightExecutor.doExecute(session, cmd, request, response, c, r);
        else throw new CoreException("未知的参数[group]");
    }
}
