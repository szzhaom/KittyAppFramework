package kitty.testapp.inf.trade.executors;

import javax.servlet.http.HttpServletResponse;
import kitty.kaf.exceptions.CoreException;
import kitty.kaf.json.JSONObject;
import kitty.kaf.json.JSONArray;
import kitty.kaf.trade.pack.HttpRequest;
import kitty.kaf.session.RequestSession;
import kitty.kaf.io.KeyValue;
import kitty.kaf.helper.StringHelper;
import java.util.List;
import java.util.ArrayList;
import kitty.testapp.inf.ds.file.beans.FileCategory;
import kitty.testapp.inf.ds.file.FileCategoryHelper;
import kitty.testapp.inf.ds.file.beans.FileHost;
import kitty.testapp.inf.ds.file.FileHostHelper;

public class FileExecutor {

    public static void doExecute(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(doExecute) statements=1]
        if (cmd.equalsIgnoreCase("insertFileCategory")) insertFileCategory(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("editFileCategory")) editFileCategory(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("removeFileCategory")) removeFileCategory(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("queryFileCategory")) queryFileCategory(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("insertFileHost")) insertFileHost(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("editFileHost")) editFileHost(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("removeFileHost")) removeFileHost(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("queryFileHost")) queryFileHost(session, cmd, request, response, c, r);
        else throw new CoreException("未知的参数[cmd]");
    }

    public static void insertFileCategory(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(insertFileCategory) statements=7]
        if (!session.getUser().hasRight(10001L)) throw new Exception("对不起，您无此权限。");
        FileCategory o = new FileCategory();
        o.readFromRequest(request, true);
        o = FileCategoryHelper.insert(null, session.getUser().getUserId(), o);
        JSONObject json = new JSONObject();
        o.toJson(json);
        c.put("data", json);
    }

    public static void editFileCategory(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(editFileCategory) statements=7]
        if (!session.getUser().hasRight(10001L)) throw new Exception("对不起，您无此权限。");
        FileCategory o = FileCategoryHelper.localFileCategoryMap.get(request.getParameterShort("file_category_id"));
        o.readFromRequest(request, false);
        o = FileCategoryHelper.edit(null, session.getUser().getUserId(), o);
        JSONObject json = new JSONObject();
        o.toJson(json);
        c.put("data", json);
    }

    public static void removeFileCategory(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(removeFileCategory) statements=2]
        if (!session.getUser().hasRight(10001L)) throw new Exception("对不起，您无此权限。");
        FileCategoryHelper.delete(null, session.getUser().getUserId(), StringHelper.splitToShortList(request.getParameter("id_list"), ","));
    }

    public static void queryFileCategory(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:def(queryFileCategory) statements=7]
        if (!session.getUser().hasRight(10001L)) throw new Exception("对不起，您无此权限。");
        String queryCmd = "default";
        long firstIndex = request.getParameterLongDef("firstindex", -1L);
        int maxResults = request.getParameterIntDef("maxresults", 20);
        List<Object> params = new ArrayList<Object>();
        String keyword = request.getParameterDef("keyword", null);
        params.add(keyword);
        //[autogenerated:exec(queryFileCategory) statements=1]
        KeyValue<Integer, List<FileCategory>> ret = FileCategoryHelper.queryPage(null, session.getUser().getUserId(), queryCmd, firstIndex, maxResults, params);
        //[autogenerated:assign(queryFileCategory) statements=1]
        if (ret != null) {
            JSONArray json = new JSONArray();
            c.put("count", ret.getKey());
            c.put("items", json);
            for (FileCategory obj : ret.getValue()) {
                JSONObject j = new JSONObject();
                obj.toJson(j);
                json.put(j);
            }
        }
    }

    public static void insertFileHost(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(insertFileHost) statements=7]
        if (!session.getUser().hasRight(10001L)) throw new Exception("对不起，您无此权限。");
        FileHost o = new FileHost();
        o.readFromRequest(request, true);
        o = FileHostHelper.insert(null, session.getUser().getUserId(), o);
        JSONObject json = new JSONObject();
        o.toJson(json);
        c.put("data", json);
    }

    public static void editFileHost(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(editFileHost) statements=7]
        if (!session.getUser().hasRight(10001L)) throw new Exception("对不起，您无此权限。");
        FileHost o = FileHostHelper.localFileHostMap.get(request.getParameterShort("file_host_id"));
        o.readFromRequest(request, false);
        o = FileHostHelper.edit(null, session.getUser().getUserId(), o);
        JSONObject json = new JSONObject();
        o.toJson(json);
        c.put("data", json);
    }

    public static void removeFileHost(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(removeFileHost) statements=2]
        if (!session.getUser().hasRight(10001L)) throw new Exception("对不起，您无此权限。");
        FileHostHelper.delete(null, session.getUser().getUserId(), StringHelper.splitToShortList(request.getParameter("id_list"), ","));
    }

    public static void queryFileHost(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:def(queryFileHost) statements=7]
        if (!session.getUser().hasRight(10001L)) throw new Exception("对不起，您无此权限。");
        String queryCmd = "default";
        long firstIndex = request.getParameterLongDef("firstindex", -1L);
        int maxResults = request.getParameterIntDef("maxresults", 20);
        List<Object> params = new ArrayList<Object>();
        String keyword = request.getParameterDef("keyword", null);
        params.add(keyword);
        //[autogenerated:exec(queryFileHost) statements=1]
        KeyValue<Integer, List<FileHost>> ret = FileHostHelper.queryPage(null, session.getUser().getUserId(), queryCmd, firstIndex, maxResults, params);
        //[autogenerated:assign(queryFileHost) statements=1]
        if (ret != null) {
            JSONArray json = new JSONArray();
            c.put("count", ret.getKey());
            c.put("items", json);
            for (FileHost obj : ret.getValue()) {
                JSONObject j = new JSONObject();
                obj.toJson(j);
                json.put(j);
            }
        }
    }
}
