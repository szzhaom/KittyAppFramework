package kitty.testapp.inf.trade.executors;

import javax.servlet.http.HttpServletResponse;
import kitty.kaf.exceptions.CoreException;
import kitty.kaf.json.JSONObject;
import kitty.kaf.json.JSONArray;
import kitty.kaf.trade.pack.HttpRequest;
import kitty.kaf.session.RequestSession;
import kitty.kaf.io.KeyValue;
import kitty.kaf.helper.StringHelper;
import java.util.List;
import java.util.ArrayList;
import kitty.testapp.inf.ds.right.beans.User;
import kitty.testapp.inf.ds.right.UserHelper;
import kitty.testapp.inf.ds.right.beans.Func;
import kitty.testapp.inf.ds.right.FuncHelper;
import kitty.testapp.inf.ds.right.beans.Role;
import kitty.testapp.inf.ds.right.RoleHelper;

public class RightExecutor {

    public static void doExecute(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(doExecute) statements=1]
        if (cmd.equalsIgnoreCase("insertUser")) insertUser(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("editUser")) editUser(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("removeUser")) removeUser(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("queryUser")) queryUser(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("insertFunc")) insertFunc(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("editFunc")) editFunc(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("removeFunc")) removeFunc(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("queryFunc")) queryFunc(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("insertRole")) insertRole(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("editRole")) editRole(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("removeRole")) removeRole(session, cmd, request, response, c, r);
        else if (cmd.equalsIgnoreCase("queryRole")) queryRole(session, cmd, request, response, c, r);
        else throw new CoreException("未知的参数[cmd]");
    }

    public static void insertUser(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(insertUser) statements=7]
        if (!session.getUser().hasRight(300003L)) throw new Exception("对不起，您无此权限。");
        User o = new User();
        o.readFromRequest(request, true);
        o = UserHelper.insert(null, session.getUser().getUserId(), o);
        JSONObject json = new JSONObject();
        o.toJson(json);
        c.put("data", json);
    }

    public static void editUser(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(editUser) statements=7]
        if (!session.getUser().hasRight(300004L)) throw new Exception("对不起，您无此权限。");
        User o = UserHelper.userMap.get(request.getParameterLong("user_id"));
        o.readFromRequest(request, true);
        o = UserHelper.edit(null, session.getUser().getUserId(), o);
        JSONObject json = new JSONObject();
        o.toJson(json);
        c.put("data", json);
    }

    public static void removeUser(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(removeUser) statements=2]
        if (!session.getUser().hasRight(300005L)) throw new Exception("对不起，您无此权限。");
        UserHelper.delete(null, session.getUser().getUserId(), StringHelper.splitToLongList(request.getParameter("id_list"), ","));
    }

    public static void queryUser(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:def(queryUser) statements=7]
        if (!session.getUser().hasRight(300001L)) throw new Exception("对不起，您无此权限。");
        String queryCmd = "query";
        long firstIndex = request.getParameterLongDef("firstindex", -1L);
        int maxResults = request.getParameterIntDef("maxresults", 20);
        List<Object> params = new ArrayList<Object>();
        String keyword = request.getParameterDef("keyword", null);
        params.add(keyword);
        //[autogenerated:exec(queryUser) statements=1]
        KeyValue<Integer, List<User>> ret = UserHelper.queryPage(null, session.getUser().getUserId(), queryCmd, firstIndex, maxResults, params);
        //[autogenerated:assign(queryUser) statements=1]
        if (ret != null) {
            JSONArray json = new JSONArray();
            c.put("count", ret.getKey());
            c.put("items", json);
            for (User obj : ret.getValue()) {
                JSONObject j = new JSONObject();
                obj.toJson(j);
                json.put(j);
            }
        }
    }

    public static void insertFunc(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(insertFunc) statements=6]
        Func o = new Func();
        o.readFromRequest(request, true);
        o = FuncHelper.insert(null, session.getUser().getUserId(), o);
        JSONObject json = new JSONObject();
        o.toJson(json);
        c.put("data", json);
    }

    public static void editFunc(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(editFunc) statements=6]
        Func o = FuncHelper.localFuncMap.get(request.getParameterLong("func_id"));
        o.readFromRequest(request, true);
        o = FuncHelper.edit(null, session.getUser().getUserId(), o);
        JSONObject json = new JSONObject();
        o.toJson(json);
        c.put("data", json);
    }

    public static void removeFunc(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(removeFunc) statements=1]
        FuncHelper.delete(null, session.getUser().getUserId(), StringHelper.splitToLongList(request.getParameter("id_list"), ","));
    }

    public static void queryFunc(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:def(queryFunc) statements=6]
        String queryCmd = "default";
        long firstIndex = request.getParameterLongDef("firstindex", -1L);
        int maxResults = request.getParameterIntDef("maxresults", 20);
        List<Object> params = new ArrayList<Object>();
        String keyword = request.getParameterDef("keyword", null);
        params.add(keyword);
        //[autogenerated:exec(queryFunc) statements=1]
        KeyValue<Integer, List<Func>> ret = FuncHelper.queryPage(null, session.getUser().getUserId(), queryCmd, firstIndex, maxResults, params);
        //[autogenerated:assign(queryFunc) statements=1]
        if (ret != null) {
            JSONArray json = new JSONArray();
            c.put("count", ret.getKey());
            c.put("items", json);
            for (Func obj : ret.getValue()) {
                JSONObject j = new JSONObject();
                obj.toJson(j);
                json.put(j);
            }
        }
    }

    public static void insertRole(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(insertRole) statements=7]
        if (!session.getUser().hasRight(100003L)) throw new Exception("对不起，您无此权限。");
        Role o = new Role();
        o.readFromRequest(request, true);
        o = RoleHelper.insert(null, session.getUser().getUserId(), o);
        JSONObject json = new JSONObject();
        o.toJson(json);
        c.put("data", json);
    }

    public static void editRole(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(editRole) statements=7]
        if (!session.getUser().hasRight(100004L)) throw new Exception("对不起，您无此权限。");
        Role o = RoleHelper.roleMap.get(request.getParameterInt("role_id"));
        o.readFromRequest(request, true);
        o = RoleHelper.edit(null, session.getUser().getUserId(), o);
        JSONObject json = new JSONObject();
        o.toJson(json);
        c.put("data", json);
    }

    public static void removeRole(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:body(removeRole) statements=2]
        if (!session.getUser().hasRight(100005L)) throw new Exception("对不起，您无此权限。");
        RoleHelper.delete(null, session.getUser().getUserId(), StringHelper.splitToIntList(request.getParameter("id_list"), ","));
    }

    public static void queryRole(RequestSession<?> session, String cmd, HttpRequest request, HttpServletResponse response, JSONObject c, JSONObject r) throws Throwable {
        //[autogenerated:def(queryRole) statements=7]
        if (!session.getUser().hasRight(100001L)) throw new Exception("对不起，您无此权限。");
        String queryCmd = "default";
        long firstIndex = request.getParameterLongDef("firstindex", -1L);
        int maxResults = request.getParameterIntDef("maxresults", 20);
        List<Object> params = new ArrayList<Object>();
        String keyword = request.getParameterDef("keyword", null);
        params.add(keyword);
        //[autogenerated:exec(queryRole) statements=1]
        KeyValue<Integer, List<Role>> ret = RoleHelper.queryPage(null, session.getUser().getUserId(), queryCmd, firstIndex, maxResults, params);
        //[autogenerated:assign(queryRole) statements=1]
        if (ret != null) {
            JSONArray json = new JSONArray();
            c.put("count", ret.getKey());
            c.put("items", json);
            for (Role obj : ret.getValue()) {
                JSONObject j = new JSONObject();
                obj.toJson(j);
                json.put(j);
            }
        }
    }
}
